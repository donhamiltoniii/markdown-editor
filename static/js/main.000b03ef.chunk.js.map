{"version":3,"sources":["assets/scripts/components/code-block/code-block.component.tsx","app.tsx","index.tsx"],"names":["CodeBlock","language","value","style","tomorrow","App","React","useState","isDarkMode","setDarkMode","markdown","setMarkdown","className","Helmet","name","content","onClick","darkMode","onChange","e","currentTarget","options","selected","event","_","renderers","code","source","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQASe,SAASA,EAAT,GAAyD,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAC5C,OACE,kBAAC,IAAD,CAAmBD,SAAUA,EAAUE,MAAOC,KAC3CF,G,OCJQ,SAASG,IAAO,IAAD,EACMC,IAAMC,UAAS,GADrB,mBACrBC,EADqB,KACTC,EADS,OAEIH,IAAMC,SACpC,4CAH0B,mBAErBG,EAFqB,KAEXC,EAFW,KAsB5B,OACE,yBAAKC,UAAS,cAASJ,EAAa,GAAK,UACvC,kBAACK,EAAA,EAAD,KACE,0BAAMC,KAAK,WAAWC,QAAQ,wCAC9B,0BACED,KAAK,cACLC,QAAQ,6CAEV,sDAEF,6BAASH,UAAU,WACjB,4BAAQA,UAAU,UAChB,kDACA,yBAAKA,UAAU,gBACb,4BAAQA,UAAS,uBAA0BI,QA9BrD,WACEP,GAAY,SAACQ,GAAD,OAAeA,OA8BhBT,EAAa,QAAU,UAI9B,6BAASI,UAAU,aACjB,yBAAKA,UAAU,oBACb,4BAAQA,UAAU,2BAChB,4BACEA,UAAU,4BACVE,KAAK,sBACLI,SArCd,SAAyBC,GAA0C,IACzDjB,EAAUiB,EAAEC,cAAZlB,MAERS,EADoBD,EAAWR,GAE/BiB,EAAEC,cAAcC,QAAQ,GAAGC,UAAW,IAmC1B,4BAAQV,UAAU,mCAAmCV,MAAM,IAA3D,kBAGA,4BACEU,UAAU,mCACVV,MAAO,uCAFT,OAMA,4BACEU,UAAU,mCACVV,MAAO,kDAFT,QAMA,4BACEU,UAAU,mCACVV,MAAO,0CAFT,cAMA,4BACEU,UAAU,mCACVV,MAAO,yCAFT,SAQJ,8BACEU,UAAU,wBACVM,SA/DZ,SAAwBK,GAAgD,IAC9DrB,EAAUqB,EAAMH,cAAhBlB,MACRS,GAAY,SAACa,GAAD,OAAOtB,MA8DTA,MAAOQ,KAGX,yBAAKE,UAAU,qBACb,kBAAC,IAAD,CAAea,UAAW,CAAEC,KAAM1B,GAAa2B,OAAQjB,Q,OCtFnEkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACzB,EAAD,OAEF0B,SAASC,eAAe,U","file":"static/js/main.000b03ef.chunk.js","sourcesContent":["import React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\ninterface CodeBlockProps {\n  language: string;\n  value: string;\n}\n\nexport default function CodeBlock({ language, value }: CodeBlockProps) {\n  return (\n    <SyntaxHighlighter language={language} style={tomorrow}>\n      {value}\n    </SyntaxHighlighter>\n  );\n}\n","import { Helmet } from 'react-helmet';\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport CodeBlock from './assets/scripts/components/code-block/code-block.component';\n\nimport './app.scss';\n\nexport default function App() {\n  const [isDarkMode, setDarkMode] = React.useState(true);\n  const [markdown, setMarkdown] = React.useState<string>(\n    '# Type Some Markdown To See It Converted',\n  );\n\n  function toggleDarkMode() {\n    setDarkMode((darkMode) => !darkMode);\n  }\n\n  function updateCodeBlock(e: React.ChangeEvent<HTMLSelectElement>) {\n    const { value } = e.currentTarget;\n    const newMarkdown = markdown + value;\n    setMarkdown(newMarkdown);\n    e.currentTarget.options[0].selected = true;\n  }\n\n  function updateMarkdown(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    const { value } = event.currentTarget;\n    setMarkdown((_) => value);\n  }\n\n  return (\n    <div className={`app ${isDarkMode ? '' : 'light'}`}>\n      <Helmet>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta\n          name=\"description\"\n          content=\"A simple web app for converting Markdown\"\n        />\n        <title>Markdown Previewer</title>\n      </Helmet>\n      <section className=\"wrapper\">\n        <header className=\"header\">\n          <h1>Markdown Previewer</h1>\n          <div className=\"theme-toggle\">\n            <button className={`theme-toggle__button`} onClick={toggleDarkMode}>\n              {isDarkMode ? 'light' : 'dark'}\n            </button>\n          </div>\n        </header>\n        <section className=\"previewer\">\n          <div className=\"previewer__input\">\n            <header className=\"previewer__input-header\">\n              <select\n                className=\"previewer__input-dropdown\"\n                name=\"code-block-selector\"\n                onChange={updateCodeBlock}\n              >\n                <option className=\"previewer__input-dropdown-option\" value=\"\">\n                  New Code Block\n                </option>\n                <option\n                  className=\"previewer__input-dropdown-option\"\n                  value={'\\n\\n```css\\n/* Add CSS here */\\n```'}\n                >\n                  CSS\n                </option>\n                <option\n                  className=\"previewer__input-dropdown-option\"\n                  value={'\\n\\n```html\\n<!-- Add HTML here -->\\n```'}\n                >\n                  HTML\n                </option>\n                <option\n                  className=\"previewer__input-dropdown-option\"\n                  value={'\\n\\n```javascript\\n// Add JS here\\n```'}\n                >\n                  JavaScript\n                </option>\n                <option\n                  className=\"previewer__input-dropdown-option\"\n                  value={'\\n\\n```jsx\\n{/* Add JSX here */}\\n```'}\n                >\n                  JSX\n                </option>\n              </select>\n            </header>\n            <textarea\n              className=\"previewer__input-area\"\n              onChange={updateMarkdown}\n              value={markdown}\n            ></textarea>\n          </div>\n          <div className=\"previewer__output\">\n            <ReactMarkdown renderers={{ code: CodeBlock }} source={markdown} />\n          </div>\n        </section>\n      </section>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./app\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}